argwrap.txt                                           Wrap and unwrap function arguments, lists, and dictionaries in Vim

========================================================================================================================
CONTENTS                                                                                                *argwrap-contents*

1. ArgWrap...............................................................................................|argwrap-argwrap|
    1.1. Installation...............................................................................|argwrap-installation|
    1.2. Configuration.............................................................................|argwrap-configuration|
    1.3. Hooks.............................................................................................|argwrap-hooks|
    1.4. Usage.............................................................................................|argwrap-usage|
    1.5. License.........................................................................................|argwrap-license|

========================================================================================================================
ARGWRAP                                                                                                  *argwrap-argwrap*

ArgWrap is an industrial strength argument wrapping and unwrapping extension for the Vim text editor. It can be used for
collapsing and expanding everything from function calls to array and dictionary definitions.  All operations are easily
reversible and correctly preserve the indentation of the surrounding code.



------------------------------------------------------------------------------------------------------------------------
INSTALLATION                                                                                        *argwrap-installation*

1.  Clone or otherwise download ArgWrap extension. Users of pathogen.vim (https://github.com/tpope/vim-pathogen) can
    clone the repository directly to their bundle directory:
>
        $ git clone https://github.com/FooSoft/vim-argwrap ~/.vim/bundle/vim-argwrap
<
2.  Create a keyboard binding for the `ArgWrap` command inside your `~/.vimrc` file.
    For example, to declare a normal mode mapping, add the following command:
>
        nmap <silent> <leader>a <Plug>(ArgWrapToggle)
<

------------------------------------------------------------------------------------------------------------------------
CONFIGURATION                                                                                      *argwrap-configuration*

You can customize the behavior of this extension by setting values for any of the following optional buffer and
global configuration variables in your `.vimrc` file. Buffer variables (prefixed with `b:`) take precedence over
global variables (prefixed with `g:`), making them ideal for configuring the behavior of this extension on a file by
file basis using `ftplugin` or `autocmd`. For example, the `argwrap_tail_comma` variable has two variants declared as
`b:argwrap_tail_comma` and `g:argwrap_tail_comma`, for buffer and global scopes respectively.

*   argwrap_line_prefix
    Specifies a line prefix to be added and removed when working with languages that require newlines to be escaped.
    Line prefix disabled (default)
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Line prefix enabled for Vimscript ()
>
        Foo(
            \wibble,
            \wobble,
            \wubble
        \)
<
*   argwrap_padded_braces
    Specifies which brace types should be padded on the inside with spaces.
    Brace padding disabled (default)
>
        [1, 2, 3]
        {1, 2, 3}
<
    Brace padding enabled for square brackets only ()
>
        [ 1, 2, 3 ]
        {1, 2, 3}
<
    Padding can be specified for multiple brace types ()
*   argwrap_tail_comma
    Specifies if any closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Tail comma enabled ()
>
        Foo(
            wibble,
            wobble,
            wubble,
        )
<
*   argwrap_tail_comma_braces
    Specifies which closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Tail comma enabled for square brackets only ()
>
        [
            1,
            2,
            3,
        ]
<
*   argwrap_tail_indent_braces
    Specifies if the closing brace should be indented to argument depth.
    Tail indent disabled
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Tail indent enabled for parenthesis ()
>
        Foo(
            wibble,
            wobble,
            wubble
            )
<
*   argwrap_wrap_closing_brace
    Specifies if the closing brace should be wrapped to a new line.
    Brace wrapping enabled (default)
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Brace wrapping disabled ()
>
        Foo(
            wibble,
            wobble,
            wubble)
<
*   argwrap_comma_first
    Specifies if the argument comma delimiter should be placed before arguments.
    Comma first disabled (default)
>
        Foo(
            wibble,
            wobble,
            wubble
        )
<
    Comma first enabled ()
>
        Foo(
            wibble
            , wobble
            , wubble
        )
<
*   argwrap_comma_first_indent
    Specifies if the first argument should be indented when used in conjunction with `argwrap_comma_first`.
    Comma first indent disabled (default)
>
        Foo(
            wibble
            , wobble
            , wubble
        )
<
    Comma first indent enabled ()
>
        Foo(
              wibble
            , wobble
            , wubble
        )
<
*   argwrap_php_smart_brace
    Specifies if the opening brace of PHP methods should be wrap/unwrap as well.
    PHP smart brace disabled (default)
>
        public function foo(
            int $x,
            int $y
        )
        {
<
    PHP smart brace enabled ()
>
        public function foo(
            int $x,
            int $y
        ) {
<

------------------------------------------------------------------------------------------------------------------------
HOOKS                                                                                                      *argwrap-hooks*

It is possible to hook before or after a  wrap/unwrap operation using
autoloaded functions, the hooks are named:
    - `pre_wrap`
    - `pre_unwrap`
    - `post_wrap`
    - `post_unwrap`

For example to do something after any wrap create a function: >
    argwrap#hooks#my_hook#post_wrap(range, container, arguments)
<
It is also possible to create a hook for a specific filetype: >
    argwrap#hooks#filetype#vim#my_hook#post_wrap(range, container, arguments)
<

Global hooks are loaded on the first time a wrap/unwrap operation is done.
Filetype hooks however are only loaded for the current filetype.
You can see the list of loaded hooks with: >
    echo g:argwrap_global_hooks
    echo g:argwrap_filetype_hooks
    echo b:argwrap_hooks
<
The hooks are loaded from any directory specified in the |runtimepath|.
Global hooks will be executed before filetype ones.
Global and filetype hooks are sorted by the |globpath()| function. Meaning you
can control the execution order of the hooks by prefixing them with a
priority.
Post hooks order is reversed in order to keep the execution order logical.

For example if there two hooks named `000_cursor` and `200_anything` , the
cursor hook being responsible to preserve the cursor position it must be
executed first to ensure no modification of the cursor position has been done
yet so it receive the lowest priority.
The execution stack for a wrap operation would then be:
    - `000_cursor#pre_wrap`
    - `000_anything#pre_wrap`
    - `wrap operation`
    - `000_anything#post_wrap`
    - `000_cursor#post_wrap`


An important things to know when writing a new hook is that calling an
|autoload| function which does not exist will source the file that should
contain the function every time.
So even if you do not need one of the hook, always define them all. This is a
template you can use to get started: >
    function! argwrap#hooks#my_hook#pre_wrap(range, container, arguments) abort " {{{
      " Do nothing but prevent the file to be loaded more than once
      " When calling an autoload function that is not define the script that
      " should contain it is sourced every time the function is called
    endfunction  " }}}

    function! argwrap#hooks#my_hook#pre_unwrap(range, container, arguments) abort " {{{
      " Do nothing but prevent the file to be loaded more than once
      " When calling an autoload function that is not define the script that
      " should contain it is sourced every time the function is called
    endfunction  " }}}

    function! argwrap#hooks#my_hook#post_wrap(range, container, arguments) abort " {{{
      " Do nothing but prevent the file to be loaded more than once
      " When calling an autoload function that is not define the script that
      " should contain it is sourced every time the function is called
    endfunction  " }}}

    function! argwrap#hooks#my_hook#post_unwrap(range, container, arguments) abort " {{{
      " Do nothing but prevent the file to be loaded more than once
      " When calling an autoload function that is not define the script that
      " should contain it is sourced every time the function is called
    endfunction  " }}}
<
------------------------------------------------------------------------------------------------------------------------
USAGE                                                                                                      *argwrap-usage*

1.  Position the cursor inside of the scope of the parenthesis, brackets or curly braces you wish to wrap/unwrap (not
    on top, before or after them).
2.  Execute the keyboard binding you defined above to toggle the wrapping and unwrapping of arguments.

------------------------------------------------------------------------------------------------------------------------
LICENSE                                                                                                  *argwrap-license*

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 vim:tw=78:sw=4:ft=help:norl:
